"""
storage.py â€” database model + session helpers (Postgres on Neon)

What this file does
-------------------
- Connects to your Postgres database (use DATABASE_URL env var on Railway/Render)
- Defines the Event table (one row per normalized event)
- Exposes:
    init_db()  -> create tables on app startup
    get_db()   -> yields a SQLAlchemy session for each request

Notes
-----
- Your Neon URL can look like either:
    postgresql://USER:PASSWORD@HOST:PORT/DBNAME
  or:
    postgresql+psycopg://USER:PASSWORD@HOST:PORT/DBNAME
  SQLAlchemy will accept both when psycopg is installed.
"""

import os
from datetime import datetime
from sqlalchemy import create_engine, String, Text, Boolean, DateTime
from sqlalchemy.orm import declarative_base, sessionmaker, Mapped, mapped_column

# ---------------------------------------------------------------------
# connection
# ---------------------------------------------------------------------
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://user:pass@host/dbname")

# pool_pre_ping=True avoids stale connections on free hosts
engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False, future=True)
Base = declarative_base()

# ---------------------------------------------------------------------
# model
# ---------------------------------------------------------------------
class Event(Base):
    """
    One normalized event.

    Primary key:
      - id (str): stable ID generated by the parser (e.g., "mock-<msgid>#standup"
                   or "gmail-<msgid>#1")

    Fields align with app.EventOut so FastAPI can serialize ORM rows directly.
    """
    __tablename__ = "events"

    # identity
    id: Mapped[str] = mapped_column(String(120), primary_key=True)

    # human-facing content
    title: Mapped[str] = mapped_column(String(300), nullable=False)
    start: Mapped[str | None] = mapped_column(String(64), nullable=True)       # ISO8601 or None
    end: Mapped[str | None] = mapped_column(String(64), nullable=True)
    location: Mapped[str | None] = mapped_column(String(300), nullable=True)
    description: Mapped[str | None] = mapped_column(Text, nullable=True)

    # recurrence
    recurring: Mapped[bool] = mapped_column(Boolean, default=False, nullable=False)
    recurrence_rule: Mapped[str | None] = mapped_column(String(300), nullable=True)  # e.g., "FREQ=DAILY"

    # provenance
    source_type: Mapped[str] = mapped_column(String(30), nullable=False)       # "mock" | "gmail"
    source_message_id: Mapped[str] = mapped_column(String(128), nullable=False)
    source_snippet: Mapped[str | None] = mapped_column(Text, nullable=True)

    # timestamps
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, nullable=False)

# ---------------------------------------------------------------------
# helpers
# ---------------------------------------------------------------------
def init_db():
    """Create tables if they don't exist."""
    Base.metadata.create_all(bind=engine)

def get_db():
    """Yield a DB session per request; FastAPI will close it automatically."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
